import type { BulkReplacementEdit } from '../BulkReplacementEdit/BulkReplacementEdit.ts'
import type { ConfirmPromptOptions } from '../ConfirmPromptOptions/ConfirmPromptOptions.ts'
import type { SearchResult } from '../SearchResult/SearchResult.ts'

export interface RendererWorkerApi {
  readonly 'About.focusNext': () => Promise<void>
  readonly 'About.focusPrevious': () => Promise<void>
  readonly 'About.handleClickClose': () => Promise<void>
  readonly 'About.handleClickCopy': () => Promise<void>
  readonly 'About.handleClickOk': () => Promise<void>
  readonly 'About.showAbout': () => Promise<void>
  readonly 'ActivityBar.focus': () => Promise<void>
  readonly 'ActivityBar.focusFirst': () => Promise<void>
  readonly 'ActivityBar.focusLast': () => Promise<void>
  readonly 'ActivityBar.focusNext': () => Promise<void>
  readonly 'ActivityBar.focusPrevious': () => Promise<void>
  readonly 'ActivityBar.handleClick': (index: number) => Promise<void>
  readonly 'ActivityBar.handleContextMenu': () => Promise<void>
  readonly 'ActivityBar.selectCurrent': () => Promise<void>
  readonly 'BulkReplacement.applyBulkReplacement': (edits: readonly BulkReplacementEdit[]) => Promise<void>
  readonly 'ClipBoard.readNativeFiles': () => Promise<readonly string[]>
  readonly 'ClipBoard.writeNativeFiles': (type: string, files: readonly string[]) => Promise<void>
  readonly 'ClipBoard.writeText': (text: string) => Promise<void>
  readonly 'ColorTheme.getColorThemeNames': () => Promise<readonly string[]>
  readonly 'ColorTheme.setColorTheme': (id: string) => Promise<void>
  readonly 'ConfirmPrompt.prompt': (confirmText: string, options: ConfirmPromptOptions) => Promise<boolean>
  readonly 'ContextMenu.show': (x: number, y: number, id: any, ...args: readonly any[]) => Promise<void>
  readonly 'EditorCompletion.selectCurrentIndex': () => Promise<void>
  readonly 'EditorCompletion.selectIndex': (index: number) => Promise<void>
  readonly 'ElectronDialog.showMessageBox': (options: any) => Promise<any>
  readonly 'ElectronWindow.close': () => Promise<void>
  readonly 'ElectronWindow.maximize': () => Promise<void>
  readonly 'ElectronWindow.minimize': () => Promise<void>
  readonly 'ElectronWindow.unmaximize': () => Promise<void>
  readonly 'ErrorHandling.showErrorDialog': (errorInfo: any) => Promise<void>
  readonly 'Explorer.acceptEdit': () => Promise<void>
  readonly 'Explorer.cancelEdit': () => Promise<void>
  readonly 'Explorer.cancelTypeAhead': () => Promise<void>
  readonly 'Explorer.expandAll': () => Promise<void>
  readonly 'Explorer.expandRecursively': () => Promise<void>
  readonly 'Explorer.focus': () => Promise<void>
  readonly 'Explorer.focusFirst': () => Promise<void>
  readonly 'Explorer.focusIndex': (index: number) => Promise<void>
  readonly 'Explorer.focusLast': () => Promise<void>
  readonly 'Explorer.handleArrowLeft': () => Promise<void>
  readonly 'Explorer.handleBlur': () => Promise<void>
  readonly 'Explorer.handleClick': (index: number) => Promise<void>
  readonly 'Explorer.handleClickAt': (preventDefault: boolean, button: number, ctrlKey: number, shiftKey: number, x: number, y: number) => Promise<void>
  readonly 'Explorer.handleClickCurrent': () => Promise<void>
  readonly 'Explorer.handleContextMenuKeyboard': () => Promise<void>
  readonly 'Explorer.handleDragLeave': () => Promise<void>
  readonly 'Explorer.handleDragOver': (x: number, y: number) => Promise<void>
  readonly 'Explorer.handleDrop': (x: number, y: number, fileIds: readonly number[], fileList: FileList | readonly File[]) => Promise<void>
  readonly 'Explorer.handleInputBlur': () => Promise<void>
  readonly 'Explorer.handleKeyDown': (key: string) => Promise<void>
  readonly 'Explorer.newFile': () => Promise<void>
  readonly 'Explorer.newFolder': () => Promise<void>
  readonly 'Explorer.refresh': () => Promise<void>
  readonly 'Explorer.removeDirent': () => Promise<void>
  readonly 'Explorer.rename': () => Promise<void>
  readonly 'Explorer.renameDirent': () => Promise<void>
  readonly 'Explorer.selectAll': () => Promise<void>
  readonly 'Explorer.selectDown': () => Promise<void>
  readonly 'Explorer.selectIndices': (indices: readonly number[]) => Promise<void>
  readonly 'Explorer.selectUp': () => Promise<void>
  readonly 'Explorer.updateEditingValue': (value: string) => Promise<void>
  readonly 'ExtensionDetail.open': (eextensionId: string) => Promise<void>
  readonly 'ExtensionDetail.selectFeature': (name: string) => Promise<void>
  readonly 'ExtensionDetail.selectTab': (name: string) => Promise<void>
  readonly 'ExtensionHost.executeCommand': (id: string) => Promise<void>
  readonly 'ExtensionHost.getCommands': () => Promise<readonly any[]>
  readonly 'ExtensionHost.searchFileWithFetch': (uri: string) => Promise<readonly string[]>
  readonly 'ExtensionHost.searchFileWithHtml': (uri: string) => Promise<readonly string[]>
  readonly 'ExtensionHost.searchFileWithMemory': (uri: string) => Promise<readonly string[]>
  readonly 'ExtensionHostManagement.activateByEvent': (event: string) => Promise<void>
  readonly 'ExtensionHostTextSearch.executeTextSearchProvider': (scheme: string, query: string) => Promise<readonly SearchResult[]>
  readonly 'ExtensionHostTextSearch.textSearchFetch': (scheme: string, root: string, query: string, options: any, assetDir: string) => Promise<readonly SearchResult[]>
  readonly 'ExtensionHostTextSearch.textSearchHtml': (scheme: string, root: string, query: string) => Promise<readonly SearchResult[]>
  readonly 'ExtensionHostTextSearch.textSearchMemory': (scheme: string, root: string, query: string, options: any, assetDir: string) => Promise<readonly SearchResult[]>
  readonly 'ExtensionManagement.disable': (id: string) => Promise<void>
  readonly 'ExtensionManagement.getAllExtensions': () => Promise<readonly any[]>
  readonly 'ExtensionManagement.getExtension': (id: string) => Promise<any>
  readonly 'ExtensionManagement.uninstall': (id: string) => Promise<void>
  readonly 'FileSystem.copy': (oldUri: string, newUri: string) => Promise<void>
  readonly 'FileSystem.createFile': (uri: string) => Promise<void>
  readonly 'FileSystem.getFolderSize': (uri: string) => Promise<number>
  readonly 'FileSystem.getPathSeparator': (root: string) => Promise<string>
  readonly 'FileSystem.getRealPath': (root: string) => Promise<string>
  readonly 'FileSystem.mkdir': (uri: string) => Promise<void>
  readonly 'FileSystem.readDirWithFileTypes': (uri: string) => Promise<readonly any[]>
  readonly 'FileSystem.readFile': (uri: string) => Promise<string>
  readonly 'FileSystem.remove': (uri: string) => Promise<void>
  readonly 'FileSystem.rename': (oldUri: string, newUri: string) => Promise<void>
  readonly 'FileSystem.stat': (root: string) => Promise<any>
  readonly 'FileSystem.writeFile': (uri: string, content: string) => Promise<void>
  readonly 'FileSystemHandle.getFileHandles': (fileIds: readonly number[]) => Promise<readonly FileSystemHandle[]>
  readonly 'FileSystemHandle.getFilePathElectron': (file: File) => Promise<string>
  readonly 'FindWidget.focusNext': () => Promise<void>
  readonly 'FindWidget.handleInput': (value: string) => Promise<void>
  readonly 'Focus.setFocus': (focusId: number) => Promise<void>
  readonly 'GetWindowId.getWindowId': () => Promise<number>
  readonly 'IconTheme.getFileIcon': (options: any) => Promise<string>
  readonly 'IconTheme.getFolderIcon': (options: any) => Promise<string>
  readonly 'IconTheme.getIcons': (request: readonly any[]) => Promise<readonly string[]>
  readonly 'IconTheme.setIconTheme': (id: string) => Promise<readonly string[]>
  readonly 'IframeInspector.focusFirst': () => Promise<void>
  readonly 'IframeInspector.focusLast': () => Promise<void>
  readonly 'IframeInspector.focusNext': () => Promise<void>
  readonly 'IframeInspector.focusPrevious': () => Promise<void>
  readonly 'IframeInspector.selectIndex': (index: number) => Promise<void>
  readonly 'KeyBindings.addKeyBinding': () => Promise<void>
  readonly 'KeyBindings.changeWhenExpression': () => Promise<void>
  readonly 'KeyBindings.clearInput': () => Promise<void>
  readonly 'KeyBindings.copyCommandId': () => Promise<void>
  readonly 'KeyBindings.copyCommandTitle': () => Promise<void>
  readonly 'KeyBindings.focusFirst': () => Promise<void>
  readonly 'KeyBindings.focusLast': () => Promise<void>
  readonly 'KeyBindings.focusNext': () => Promise<void>
  readonly 'KeyBindings.focusPrevious': () => Promise<void>
  readonly 'KeyBindings.handleClick': (x: number, y: number) => Promise<void>
  readonly 'KeyBindings.handleContextMenu': (button: number, x: number, y: number) => Promise<void>
  readonly 'KeyBindings.handleDoubleClick': (x: number, y: number) => Promise<void>
  readonly 'KeyBindings.handleInput': (value: string) => Promise<void>
  readonly 'KeyBindings.handleWheel': (deltaMode: number, deltaY: number) => Promise<void>
  readonly 'KeyBindings.removeKeyBinding': () => Promise<void>
  readonly 'KeyBindings.resetKeyBinding': () => Promise<void>
  readonly 'KeyBindings.showSameKeyBindings': () => Promise<void>
  readonly 'KeyBindings.sortByPrecedence': () => Promise<void>
  readonly 'KeyBindings.startRecordingKeys': () => Promise<void>
  readonly 'KeyBindings.stopRecordingKeys': () => Promise<void>
  readonly 'KeyBindings.toggleRecordingKeys': () => Promise<void>
  readonly 'KeyBindingsInitial.getKeyBindings': () => Promise<readonly any[]>
  readonly 'Layout.hideSideBar': () => Promise<void>
  readonly 'Layout.showPanel': (id: string) => Promise<void>
  readonly 'Main.closeActiveEditor': () => Promise<void>
  readonly 'Main.closeAllEditors': () => Promise<void>
  readonly 'Main.closeOthers': () => Promise<void>
  readonly 'Main.closeTabsLeft': () => Promise<void>
  readonly 'Main.closeTabsRight': () => Promise<void>
  readonly 'Main.focusFirst': () => Promise<void>
  readonly 'Main.focusLast': () => Promise<void>
  readonly 'Main.focusNext': () => Promise<void>
  readonly 'Main.focusPrevious': () => Promise<void>
  readonly 'Main.openKeyBindings': () => Promise<void>
  readonly 'Main.openUri': (uri: string, focus?: boolean, props?: any) => Promise<void>
  readonly 'Main.splitRight': () => Promise<void>
  readonly 'Markdown.renderMarkdown': (markdown: string, options: any) => Promise<string>
  readonly 'Menu.selectItem': (text: string) => Promise<void>
  readonly 'MouseActions.get': (uid: number, button: number, modifiers: any) => Promise<any>
  readonly 'OpenNativeFolder.openNativeFolder': (path: string) => Promise<void>
  readonly 'Preferences.get': (key: string) => Promise<any>
  readonly 'Process.getChromeVersion': () => Promise<string>
  readonly 'Process.getElectronVersion': () => Promise<string>
  readonly 'Process.getNodeVersion': () => Promise<string>
  readonly 'Process.getV8Version': () => Promise<string>
  readonly 'RecentlyOpened.getRecentlyOpened': () => Promise<readonly string[]>
  readonly 'Run And Debug.handlePaused': (params: any) => Promise<void>
  readonly 'Run And Debug.handleResumed': (params: any) => Promise<void>
  readonly 'Run And Debug.handleScriptParsed': (params: any) => Promise<void>
  readonly 'Search.clearSearchResults': () => Promise<void>
  readonly 'Search.collapseDetails': () => Promise<void>
  readonly 'Search.dismissItem': () => Promise<void>
  readonly 'Search.focusFirst': () => Promise<void>
  readonly 'Search.focusIndex': (index: number) => Promise<void>
  readonly 'Search.focusNext': () => Promise<void>
  readonly 'Search.focusNextPage': () => Promise<void>
  readonly 'Search.focusPrevious': () => Promise<void>
  readonly 'Search.focusPreviousPage': () => Promise<void>
  readonly 'Search.handleExcludeInput': (value: string) => Promise<void>
  readonly 'Search.handleInput': (value: string) => Promise<void>
  readonly 'Search.handleReplaceInput': (value: string) => Promise<void>
  readonly 'Search.handleWheel': (deltaMode: number, deltaY: number) => Promise<void>
  readonly 'Search.openDetails': () => Promise<void>
  readonly 'Search.replaceAll': () => Promise<void>
  readonly 'Search.selectIndex': (index: number) => Promise<void>
  readonly 'Search.setIncludeValue': (value: string) => Promise<void>
  readonly 'Search.toggleMatchCase': () => Promise<void>
  readonly 'Search.toggleMatchWholeWord': () => Promise<void>
  readonly 'Search.togglePreserveCase': () => Promise<void>
  readonly 'Search.toggleReplace': () => Promise<void>
  readonly 'Search.toggleSearchDetails': () => Promise<void>
  readonly 'Search.toggleUseRegularExpression': () => Promise<void>
  readonly 'SearchProcess.invoke': (command: string, ...args: readonly any[]) => Promise<any>
  readonly 'SendMessagePortToElectron.sendMessagePortToElectron': (port: MessagePort, command: string) => Promise<void>
  readonly 'SendMessagePortToExtensionHostWorker.sendMessagePortToExtensionHostWorker': (port: MessagePort, initialCommand: string, rpcId: number) => Promise<void>
  readonly 'SendMessagePortToExtensionHostWorker.sendMessagePortToSharedProcess': (port: MessagePort, outerCommand: string, rpcId: number) => Promise<void>
  readonly 'SendMessagePortToFileSystemProcess.sendMessagePortToFileSystemProcess': (port: MessagePort, outerCommand: string, rpcId: number) => Promise<void>
  readonly 'SideBar.openViewlet': (id: string) => Promise<void>
  readonly 'Source Control.acceptInput': () => Promise<void>
  readonly 'Source Control.handleClickSourceControlButtons': (index: number, name: string) => Promise<void>
  readonly 'Source Control.handleInput': (text: string) => Promise<void>
  readonly 'Source Control.selectIndex': (index: number) => Promise<void>
  readonly 'StatusBar.updateStatusBarItems': () => Promise<void>
  readonly 'TitleBarMenuBar.closeMenu': () => Promise<void>
  readonly 'TitleBarMenuBar.focus': () => Promise<void>
  readonly 'TitleBarMenuBar.focusFirst': () => Promise<void>
  readonly 'TitleBarMenuBar.focusIndex': () => Promise<void>
  readonly 'TitleBarMenuBar.focusLast': () => Promise<void>
  readonly 'TitleBarMenuBar.focusNext': () => Promise<void>
  readonly 'TitleBarMenuBar.focusPrevious': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyArrowDown': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyArrowLeft': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyArrowRight': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyArrowUp': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyEnd': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyEscape': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeyHome': () => Promise<void>
  readonly 'TitleBarMenuBar.handleKeySpace': () => Promise<void>
  readonly 'TitleBarMenuBar.toggleIndex': (index: number) => Promise<void>
  readonly 'TitleBarMenuBar.toggleMenu': () => Promise<void>
  readonly 'Viewlet.closeWidget': (id: number | string) => Promise<void>
  readonly 'Viewlet.openWidget': (widgetId: string) => Promise<string>
  readonly 'WebView.getWebViewInfo2': (id: string) => Promise<any>
  readonly 'WebView.registerInterceptor': (id: number, port: MessagePort) => Promise<void>
  readonly 'WebView.setPort': (id: number, port: MessagePort, origin: string, portType: string) => Promise<void>
  readonly 'WebView.unregisterInterceptor': (id: number) => Promise<void>
  readonly 'Workspace.getPath': () => Promise<string>
  readonly 'Workspace.setPath': (uri: string) => Promise<void>
}
